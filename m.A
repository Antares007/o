bits 64
%define a rax
%define o rdi
%define b rsi
%define e rdx
%define c rdx
;(define eval-expr
;  (lambda (expr env)
;    (pmatch expr
;      [,x (guard (symbol? x))
;        (env x)]
;      [(lambda (,x) ,body)
;        (lambda (arg)
;          (eval-expr body (lambda (y)
;                            (if (eq? x y)
;                              arg
;                              (env y)))))]
;      [(,rator ,rand)
;        ((eval-expr rator env)
;         (eval-expr rand env))])))
%macro function 1
  %defstr %%name %1
  mov a,  o
  mov o,  %%name       ;name
  lea b,  [rel %1]     ;head
  lea e,  [rel %1.end] ;tail
  jmp a
%1:
%endmacro

%macro import 2
%%next:
  lea   rdi, [rel %%pith]
  jmp   rdx 
%1:
  dq 0
%%pith:
  mov   rax, %2
  cmp   rdi, rax
  jne    %%next
  mov  [rel %1], rsi
%endmacro

%macro imports 1-*
%rep (%0)
  %defstr %%name %1
  import %1, %%name
  %rotate  1
%endrep
%endmacro
