bits 64
%define a rax
%define ptr
%define o rdi
%define b rsi
%define e rdx
%define c rcx
;(define eval-expr
;  (lambda (expr env)
;    (pmatch expr
;      [,x (guard (symbol? x))
;        (env x)]
;      [(lambda (,x) ,body)
;        (lambda (arg)
;          (eval-expr body (lambda (y)
;                            (if (eq? x y)
;                              arg
;                              (env y)))))]
;      [(,rator ,rand)
;        ((eval-expr rator env)
;         (eval-expr rand env))])))
%macro function 1
  %defstr %%name %1
  mov a,  o
  mov o,  %%name       ;name
  lea b,  [rel %1]     ;head
  lea e,  [rel %1.end] ;tail
  jmp a
%1:
%endmacro

%macro import 2
%%next:
  lea   rdi, [rel %%pith]
  jmp   rdx 
%1:
  dq 0
%%pith:
  mov   rax, %2
  cmp   rdi, rax
  jne    %%next
  mov  [rel %1], rsi
%endmacro

%macro imports 1-*
%rep (%0)
  %defstr %%name %1
  import %1, %%name
  %rotate  1
%endrep
%endmacro

%macro import2 2-*
                      lea     rax, [rel %%begin_data]
                      mov     [rel %%begin], rax
                      lea     rax, [rel %%end_data]
                      mov     [rel %%end], rax
                      mov     rax, [rel %1]
                      jmp     %%end_data
                      %rotate 1
  %%begin:            dq      0
  %%end:              dq      0
  %%begin_data:       
                      %rep (%0 - 1)
                        %defstr %%name %1
  %1:                   dq    0
                        dq    %%name
                        %rotate 1
                      %endrep
  %%end_data:         push    rdi
  %%next:             lea     rdi, [rel %%pith]
                      jmp     rax
  %%pith:             test    edi, edi
                      je      %%cont
                      mov     rax, rdi
                      pop     rdi
                      xchg    rax, rdi
                      jmp     rax
  %%cont:             mov     rax, qword ptr [rel %%begin]
                      cmp     qword ptr [rax], rsi
                      jne     %%ne
                      mov     qword ptr [rax + 0x8], rdx
                      add     rax, 0x10
                      mov     qword ptr [rel %%begin], rax
  %%ne:               cmp     rax, qword ptr [rel %%end]
                      jae     %%done
                      test    rcx, rcx
                      je      %%err
                      mov     rax, rcx       
                      jmp     %%next
  %%err:              pop     rdi
                      mov     rax, rdi
                      mov     edi, 0xffffffff
                      jmp     rax
  %%done:             pop     rdi
%endmacro

