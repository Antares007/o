%include "m.A"
push rdi
lea rdx, [rel tail]
imports putstr, ns, read, plus
mov rdx, [rel ns]
imports putchars, putchar2
pop rdi

  mov   edi, 0x0          ; fd
  lea   rsi, [rel buffer] ; char*
  mov   edx, buffer.size  ; length
  call  [rel read]
  cmp   eax, 0
  je    exit

  mov   edi, 0x1          ; fd
  lea   rsi, [rel buffer] ; const char*
  mov   edx, eax          ; length
  call  [rel putstr]

  mov   rdi, 'abcdefgh'
  call  [rel putchars]
  mov   rdi, 0xa
  call  [rel putchars]
  call f
  call c
  mov   rdi, 'hi'
  call  [rel putchars]
exit:
  ret

buffer:
  times 1<<4 db '_'
  .size: equ $ - buffer
  align 1<<0
c:
f:
  mov rdi, 'a'
  call [rel putchars]
  ret
tail:
