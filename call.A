%include "m.A"

global testnar
testnar:
push rbp
mov rbp,rsp
sub rsp,byte +0x20
xor eax,eax
mov [rbp-0x08],rdi
mov [rbp-0x10],rsi
mov [rbp-0x18],rdx
mov rcx,[rbp-0x10]
mov dword [rcx],0x7ffffff0
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x10]
mov dword [rcx],0x7ffffff1
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x10]
mov dword [rcx],0x7ffffff2
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x10]
mov dword [rcx],0x7ffffff3
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x10]
mov qword [rcx],0x171
mov rcx,[rbp-0x10]
add rcx,byte +0x8
mov [rbp-0x10],rcx
mov rcx,[rbp-0x10]
mov dword [rcx],0x7fffffff
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x10]
mov dword [rcx],0x16
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x8]
mov rsi,[rbp-0x10]
mov rdx,[rbp-0x18]
mov edi,eax
call rcx
xor edi,edi
mov rcx,[rbp-0x10]
mov qword [rcx],0x1
mov rcx,[rbp-0x10]
add rcx,byte +0x8
mov [rbp-0x10],rcx
mov rcx,[rbp-0x8]
mov rsi,[rbp-0x10]
mov rdx,[rbp-0x18]
call rcx
xor edi,edi
mov rcx,[rbp-0x10]
mov dword [rcx],0x2
mov rcx,[rbp-0x10]
add rcx,byte +0x4
mov [rbp-0x10],rcx
mov rcx,[rbp-0x8]
mov rsi,[rbp-0x10]
mov rdx,[rbp-0x18]
call rcx
xor edi,edi
mov rcx,[rbp-0x10]
mov word [rcx],0x3
mov rcx,[rbp-0x10]
add rcx,byte +0x2
mov [rbp-0x10],rcx
mov rcx,[rbp-0x8]
mov rsi,[rbp-0x10]
mov rdx,[rbp-0x18]
call rcx
add rsp,byte +0x20
pop rbp
ret

;sb sw sd sq 
;ub uw ud uq

global tests
tests:
  push   r15
  push   r14
  push   r12
  push   rbx
  push   rax

  mov    r14,                 rcx
  ;  abi(rcz == r);
  ;  r14 = r
  mov    r12,                 rdi
  ;  abi(rdi == o);
  ;  r12 = o
  mov    rbx,                 rsi
  ;  abi(rsi == b);
  ;  a = b;
  mov    word [rsi],          0x36
  ;  P(short, 0x36);
  mov    qword [rsi+0x2],     0x63
  ;  P(long int, 0x63);
  mov    dword [rsi+0xa],     0x99
  ;  P(int, 0x99);
  lea    r15,                 [rsi+0xe]
  ;  r15 = 
  xor    edi,                 edi
  mov    rdx,                 r15
  call   r12
  ;  r12(0, a, b, r);
  mov    dword [rbx],         0x99
  mov    qword [rbx+0x4],     0x63
  
  mov    word  [rbx+0xc],     0x36
  xor    edi,                 edi
  mov    rsi,                 rbx
  mov    rdx,                 r15
  mov    rcx,                 r14
  call   r12
  mov    edi,                 0xffffffff
  xor    esi,                 esi
  xor    edx,                 edx
  mov    rcx,                 r14
  mov    rax,                 r12
  add    rsp,                 0x8
  pop    rbx
  pop    r12
  pop    r14
  pop    r15
  jmp    rax
  nop
